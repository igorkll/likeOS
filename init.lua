--в ОС присутствует код из mineOS от Игоря Тимофеева https://github.com/IgorTimofeev/MineOS
--[[
likeOS, "чистая" ос без оболочьки, с низкими сис требованиями
предназначена для автоматизации(роботов, упровления аэс)
ос имеет очень низкий разход оперативной памяти благодаря системме calls
которыя позволяет обрашяться к функциям лежашие на hdd
имееться умная автовыгрузка библиотек

ядро ос содержит простой api для работы с графикой, который поможет вам в осрисовки интерфейсов
даный api позволит вам работать на нескольких мониторах, а заботу переключения gpu возмет на себя сам api
однако для работы на нескольких мониторах стоит использовать несколько видеокарт(так будет быстрее)
если вы хотите использовать ос на компьютере, могу посоветовать дистрибутив liked(https://github.com/igorkll/liked)
ос имеет очень низкий разход оперативной памяти благодаря системме calls
которыя позволяет обрашяться к функциям лежашие на hdd

для создания собственного дистрибутива, я рекомендую скопировать ядро в репозиторий, так как при обновлении ваш дистрибутив может поломаться, дабы этого избежать, скопируйте текушию версию ядра к себе в репозиторий и обновляйте в ручьную, где нада - допиливайте

likeOS разпостраняеться без лиценции по этому вы имеете полное право на копирования хоть всего кода, так как я терпеть не могу всякого рода ограничалки для кода, код обший и принадлежит всем и каждому

структура файловой системмы
/system/core - ядро ос, туда лутще не лезть без крайней необходимости
/system - файлы дистрибутива, свои программы и библиотеки закидывайте сюда
/data - данные ос
]]

_G._COREVERSION = "v0.11"

local bootaddress, invoke = computer.getBootAddress(), component.invoke
local function raw_loadfile(path, mode, env)
    local file, err = invoke(bootaddress, "open", path, "rb")
    if not file then return nil, err end
    local buffer = ""
    repeat
        local data = invoke(bootaddress, "read", file, math.huge)
        buffer = buffer .. (data or "")
    until not data
    return load(buffer, "=" .. path, mode or "bt", env or _G)
end
local code, err = raw_loadfile("/system/core/boot.lua")
if not code then
    error("err to load bootloader " .. (err or "unknown error"), 0)
end
code(raw_loadfile)